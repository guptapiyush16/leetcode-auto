# -*- coding: utf-8 -*-
"""Leetcode submission Auto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11q4ur3bLFr9qzm8BEKGj7B7VRuI3f4Bm
"""

import os
import requests
import time
from datetime import datetime

# Load from environment
LEETCODE_SESSION = os.environ["LEETCODE_SESSION"]
CSRF_TOKEN = os.environ["CSRF_TOKEN"]

# UTC time for submission (6:00 AM UTC = 11:30 AM IST)
SCHEDULE_TIME = "2025-06-30 06:00:00"

# LeetCode problem slug and language
QUESTION_TITLE_SLUG = "two-sum"
LANGUAGE = "cpp"

# Your solution code
CODE = """
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp;
        for(int i = 0; i < nums.size(); i++) {
            int diff = target - nums[i];
            if(mp.find(diff) != mp.end())
                return {mp[diff], i};
            mp[nums[i]] = i;
        }
        return {};
    }
};
"""

headers = {
    "User-Agent": "Mozilla/5.0",
    "referer": f"https://leetcode.com/problems/{QUESTION_TITLE_SLUG}/",
    "x-csrftoken": CSRF_TOKEN,
    "cookie": f"LEETCODE_SESSION={LEETCODE_SESSION}; csrftoken={CSRF_TOKEN}",
}

def get_question_id(slug):
    url = "https://leetcode.com/graphql"
    query = {
        "query": """
        query getQuestionDetail($titleSlug: String!) {
          question(titleSlug: $titleSlug) {
            questionId
          }
        }
        """,
        "variables": {"titleSlug": slug}
    }
    r = requests.post(url, json=query, headers=headers)
    return r.json()["data"]["question"]["questionId"]

def submit_solution():
    question_id = get_question_id(QUESTION_TITLE_SLUG)
    submit_url = f"https://leetcode.com/problems/{QUESTION_TITLE_SLUG}/submit/"
    payload = {
        "lang": LANGUAGE,
        "question_id": str(question_id),
        "typed_code": CODE
    }

    res = requests.post(submit_url, json=payload, headers=headers)
    if res.status_code == 200:
        print("✅ Submitted successfully")
    else:
        print("❌ Submission failed!")
        print(res.text)

def wait_until(schedule_str):
    submit_time = datetime.strptime(schedule_str, "%Y-%m-%d %H:%M:%S")
    while datetime.utcnow() < submit_time:
        print("⏳ Waiting... now:", datetime.utcnow())
        time.sleep(10)
    submit_solution()

wait_until(SCHEDULE_TIME)
